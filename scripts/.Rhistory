# Create a summary sentence for each state by passing your `uniq_states`
# variable and `count_in_location` variables to the `sapply()` function.
# Store your results in `state_summary`
# (don't miss how amazing this is! Very powerful to apply your function to an
# entire vector *at once* with `sapply()`)
state_summary <- sapply(uniq_states, count_in_location)
# Create a summary table by passing your `states` variable to the `table()`
# funciton, and storing the result in a variable `state_table`.
state_table <- table(states)
# Optional: use the View() function to more easily read the table
View(state_table)
# What was the maximum number of protests in a state? `max_in_state`
# (hint: use your `state_table` variable)
max_in_state <- max(state_table)
# Extract the `Date` column into a variable called `dates` by passing the
# column to the `as.Date()` function (this will process the values as dates,
# which are *luckily* already in an optimal format for parsing)
names(protests)
dates <- as.Date(protests$Date)
# What is the most recent date in the dataset? `most_recent`
most_recent <- max(dates)
# What is the earliest date in the dataset? `earliest`
earliest <- min(dates)
# What is the length of the timespan of the dataset? `time_span`
# hint: R can do math with dates pretty well by default!
time_span <- most_recent - earliest
# Create a vector of the dates that are in 2020 `in_2020`
in_2020 <- sum(stringr::str_detect(dates,"2020"), na.rm = TRUE)
# Create a vector of the dates that are in 2019. `in_2019`
in_2019 <- sum(stringr::str_detect(dates,"2019"), na.rm = TRUE)
# What is the ratio of the number of protests in 2020 comparted to 2019?
# `ratio_2020_2019`
ratio_2020_2019 <- in_2020/in_2019
# Write a function `count_on_date()` that accecpts as a parameter a `date`,
# and returns the sentence:
# "There were N protests on DATE.", where N is the number of protests on that
# date, and DATE is the date provided
count_on_date <- function(DATE) {
N <- sum(stringr::str_detect(dates,DATE), na.rm = TRUE)
return(cat("There were", N , "protests on", DATE))
}
# Using your function you just wrote, how many protests were there on
# May 24th, 2020? `num_may_24`
num_may_24 <- count_on_date("2020-05-24")
# Using your function you just wrote, how many protests were there on
# May 31th, 2020? `num_on_may_31`
num_may_31 <- count_on_date("2020-05-31")
# How many protests occured each month in 2020? `by_month_table`
# Hint: use the `months()` function, your `in_2020` dates, and the `table()`
# Function. If you like, you can do this in multiple different steps.
months_2020 <- months(dates, in_2020)
by_month_table <- table(months_2020)
# As a comparison, let's assess the change between July 2019 and July 2020.
# What is the *difference* in the number of protests between July 2020 and
# July 2019? You'll want to do this in multiple steps as you see fit, though
# your answer should be stored in the variable `change_july_protests`.
months_2019 <- months(dates, in_2019)
num_July_2020 <- sum(stringr::str_detect(months_2020,"Jul"), na.rm = TRUE)
num_July_2019 <- sum(stringr::str_detect(months_2019,"Jul"), na.rm = TRUE)
change_july_protests <- num_July_2020 - num_July_2019
############### Part 5: Protest Purpose ###############
# In this section, you're exploring *why* protests happened
# Extract the `Event..legacy..see.tags.` column into a variable called `purpose`
names(protests)
purpose <- protests$Event..legacy..see.tags.
# How many different purposes are listed in the dataset? `num_purposes`
num_purposes <- unique(purpose)
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
high_level_purpose <- stringr::str_trim(stringr::str_match_all(purpose, "^[^\\(]+"))
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- unique(high_level_purpose)
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(num_high_level)
############### Part 6: Independent Exploration ###############
# As a last step, you should write your own function that allows you to
# quickly ask questions of the dataset. For example, in the above sections,
# you wrote functions to ask the same question about different months, or
# locations. If you need any guidance here, feel free to ask!
count_per_purpose <- function(PURPOSE) {
N <- sum(stringr::str_detect(purpose,PURPOSE), na.rm = TRUE)
return(cat("There were", N , "protests about", PURPOSE))
}
# Reflection: Take a look (`View()`) your `high_level_table` variable. What
# picture does this paint of the U.S.?
View(high_level_table)
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
high_level_purpose <- stringr::str_trim(stringr::str_match_all(purpose, "^[^\\(]+"))
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- unique(high_level_purpose)
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(num_high_level)
# Reflection: Take a look (`View()`) your `high_level_table` variable. What
# picture does this paint of the U.S.?
View(high_level_table)
############### Part 5: Protest Purpose ###############
# In this section, you're exploring *why* protests happened
# Extract the `Event..legacy..see.tags.` column into a variable called `purpose`
names(protests)
purpose <- protests$Event..legacy..see.tags.
# How many different purposes are listed in the dataset? `num_purposes`
num_purposes <- unique(purpose)
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
high_level_purpose <- stringr::str_trim(stringr::str_match_all(purpose, "^[^\\(]+"))
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- unique(high_level_purpose)
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(num_high_level)
# Reflection: Take a look (`View()`) your `high_level_table` variable. What
# picture does this paint of the U.S.?
View(high_level_table)
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
high_level_purpose <- stringr::str_trim(stringr::str_match_all(purpose, "^[^\\(]+"))
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- unique(high_level_purpose)
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(num_high_level)
# How many different purposes are listed in the dataset? `num_purposes`
num_purposes <- unique(purpose)
############### Part 1:Set up ##############
# In this section, you're loading the data and necessary packages.
# Load the `stringr` package, which you'll use later.
install.packages("stringr")
install.packages("stringr")
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
high_level_purpose <- as.character(purpose)
unlist(strsplit(purpose, " \\(.*\\)"))
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- unique(high_level_purpose)
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(num_high_level)
# Reflection: Take a look (`View()`) your `high_level_table` variable. What
# picture does this paint of the U.S.?
View(high_level_table)
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
high_level_purpose <- stringr::str_trim(stringr::str_match_all(purpose, "^[^\\(]+"))
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- unique(high_level_purpose)
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(num_high_level)
# Reflection: Take a look (`View()`) your `high_level_table` variable. What
# picture does this paint of the U.S.?
View(high_level_table)
load("/Users/Audrey/Downloads/airports.rda")
load("/Users/Audrey/Downloads/flights.rda")
View(flights)
library(dplyr)
library(tidyverse)
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
View(location)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- mutate(counties, cat(counties$county, counties$state, sep = ", "))
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- mutate(counties, cat(county, state, sep = ", "))
View(location)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- mutate(counties, county, state, sep = ", ")
View(location)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- mutate(counties, "county"" + ", " + "state")
View(location)
# What is the name of the location (county, state) with the highest number
# of deaths? `location_most_deaths`
location_most_deaths <-
# Reflection: Is the location with the highest number of cases the location with
# the most deaths? If not, why do you believe that may be the case?
# At this point, you (hopefully) have realized that the `cases` column *is not*
# the number of _new_ cases in a day (if not, you may need to revisit your work)
# Add (mutate) a new column on your `national` data frame called `new_cases`
# that has the nubmer of *new* cases each day (hint: look for the `lag`
# function).
# Similarly, the `deaths` columns *is not* the nubmber of new deaths per day.
# Add (mutate) a new column on your `national` data frame called `new_deaths`
# that has the nubmer of *new* deaths each day
# What was the date when the most new cases occured?
# `date_most_cases`
date_most_cases <-
# What was the date when the most new deaths occured?
# `date_most_deaths`
data_most_deaths <-
# How many people died on the date when the most deaths occured? `most_deaths`
most_deaths <-
# Create a (very basic) plot by passing `national$new_cases` column to the
# `plot()` function. Store the result in a variable `new_cases_plot`.
new_cases_plot <-
# Create a (very basic) plot by passing the `new_deaths` column to the
# `plot()` function. Store the result in a variable `new_deaths_plot`.
new_deaths_plot <_
# Reflection: what do the plots of new cases and deaths tell us about the
# pandemic happening in "waves"? How (and why, do you think) these plots
# look different?
# ######## Grouped analysis ##########
# An incredible power of R is to perform the same computation *simultaneously*
# across groups of rows. The following questions rely on that capability.
# What is the county with the *current* (e.g., on the most recent date)
# highest number of cases in each state? Your answer, stored in
# `highest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
# Hint: be careful about the order of filtering your data!
highest_in_each_state <- counties %>%
unite(location, county, state, sep = ", ", remove = F) %>%
group_by(state) %>%
filter(date == max(date)) %>%
filter(cases == max(cases, na.rm = T)) %>%
pull(location)ssss
# Which locaiton (COUNTY, STATE) has had the highest number of cases
# in Washington? `highest_in_wa`
# (hint: you may need to find a match of a particular *string*, and you may
# just want to use base R syntax rather than a dplyr function)
highest_in_wa <- highest_in_each_state[str_detect(highest_in_each_state,
"Washington")]
# What is the county with the *current* (e.g., on the most recent date)
# lowest number of deaths in each state? Your answer, stored in
# `lowest_in_each_state`, should be a *vector* of
# `location` names (the column with COUNTY, STATE).
lowest_in_each_state <- counties %>%
unite(location, county, state, sep = ", ", remove = F) %>%
group_by(state) %>%
filter(date == min(date)) %>%
filter(cases == min(cases, na.rm = T)) %>%
pull(location)
# Reflection: Why are there so many observations (counties) in the variable
# `lowest_in_each_state` (i.e., wouldn't you expect the number to be ~50)?
# What *proportion* of counties have had zero deaths in each state? In other
# words, in each state, how many counties have had zero deaths, divided by
# the total number of counties in the state? You should return a *dataframe*
# with both the state name, and the proportion (`prop`) in a variable
# called `prop_no_deaths`
# (this one is tricky.... take your time)
prop_no_deaths <- num_uniq_counties_each_state$state, prop_no_deaths) %>%
rename(state = num_uniq_counties_each_state.state, prop = prop_no_deaths)
# What proportion of counties in Washington have had zero deaths?
# `wa_prop_no_deaths`
wa_prop_no_deaths <- prop_no_deaths[str_detect(prop_no_deaths$state, "Washington")]
filter(state == "Washington") %>%
select(prop)
# The following is a check on our understanding of the data.
# Presumably, if we add up all of the cases on each day in the
# `states` or `counties` dataset, they should add up to the number at the
# `national` level. So, let's check.
# First, let's create `state_by_day` by adding up the cases on each day in the
# `states` dataframe. For clarity, let's call the column with the total cases
# `state_total`
# This will be a dataframe with the columns `date` and `state_total`.
state_by_day <- states %>%
# Next, let's create `county_by_day` by adding up the cases on each day in the
# `counties` dataframe. For clarity, let's call the column with the total cases
# `county_total`
# This will also be a dataframe, with the columns `date` and `county_total`.
county_by_day <-
# Now, there are a few ways to check if they are always equal. To start,
# let's *join* those two dataframes into one called `totals_by_day`
totals_by_day <-
# Next, let's create a variable `all_totals` by joining `totals_by_day`
# to the `national` dataframe
all_totals <-
# How many rows are there where the state total *doesn't equal* the natinal
# cases reported? `num_state_diff`
num_state_diff <-
# How many rows are there where the county total *doesn't equal* the natinal
# cases reported? `num_county_diff`
num_county_diff <-
# Oh no! An inconsistency -- let's dig further into this. Let's see if we can
# find out *where* this inconsistency lies. Let's take the county level data,
# and add up all of the cases to the state level on each day (e.g.,
# aggregating to the state level). Store this dataframe with three columns
# (state, date, county_totals) in the variable `sum_county_to_state`.
# (To avoid DPLYR automatically grouping your results,
# specify `.groups = "drop"` in your `summarize()` statement. This is a bit of
# an odd behavior....)
sum_county_to_state <- counties %>%
group_by(date, state) %>%
summarize(cases = sum(cases), .groups = "drop")
# Then, let's join together the `sum_county_to_state` dataframe with the
# `states` dataframe into the variable `joined_states`.
joined_states <- left_join(sum_county_to_state, states, by = "state")
# To find out where (and when) there is a discrepancy in the number of cases,
# create the variable `has_discrepancy`, which has *only* the observations
# where the sum of the county cases in each state and the state values are
# different. This will be a *dataframe*.
has_discrepancy <- sum_county_to_state %>%
filter(cases !+ states$cases)
# Next, lets find the *state* where there is the *highest absolute difference*
# between the sum of the county cases and the reported state cases.
# `state_highest_difference`.
# (hint: you may want to create a new column in `has_discrepancy` to do this.)
state_highest_difference <- has_discrepancy %>%
mutate(abs(max(sum_county_to_state$cases - states$cases)))
filter
# Ask your own 3 questions: in the section below, pose 3 questions,
# then use the appropriate code to answer them.
# Reflection: What surprised you the most throughout your analysis?
location <- counties %>%
mutate("county"" + ", " + "state")
location <- counties %>%
mutate("county" + ", " + "state")
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
location <- counties %>%
mutate(county + ", " + state)
location <- counties %>%
mutate(county + ", " + state)
location <- counties %>%
mutate(c(county, ", ",state))
location <- counties %>%
mutate(c(county, ", ",state))
unite(counties, location, county, state, sep = ", ", remove = FALSE)
View(location)
unite(counties, location, county, state, sep = ", ", remove = TRUE)
View(location)
View(location)
location_most_deaths <- counties %>%
filter(deaths == max(deaths)) %>%
pull(location)
location_most_deaths <- location %>%
filter(deaths == max(deaths)) %>%
pull(location)
# What is the name of the location (county, state) with the highest number
# of deaths? `location_most_deaths`
location_most_deaths <- counties %>%
filter(deaths == max(deaths)) %>%
pull(location)
# Load the *national level* data into a variable. `national`
# (hint: you'll need to get the "raw" URL from the NYT GitHub page)
national <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
# Load the *state level* data into a variable. `states`
states <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv")
# Load the *county level* data into a variable. `counties`
# (this is a large dataset, which may take ~30 seconds to load)
counties <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
# How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
# How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
# How many total cases have there been in the U.S. by the most recent date
# in the dataset? `total_us_cases`
total_us_cases<- national %>%
filter(date == max(date)) %>%
pull(cases)
# How many total deaths have there been in the U.S. by the most recent date
# in the dataset? `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(date)) %>%
pull(deaths)
# Which state has had the highest number of cases?
# `state_highest_cases`
state_highest_cases <- states %>%
filter(cases == max(cases)) %>%
pull(state)
# What is the highest number of cases in a state?
# `num_highest_state`
num_highest_state <- states %>%
select(state,cases) %>%
filter(cases == max(cases)) %>%
pull(cases)
# Which state has the highest ratio of deaths to cases (deaths/cases), as of the
# most recent date? `state_highest_ratio`
# (hint: you may need to create a new column in order to do this!)
state_highest_ratio <- states %>%
filter(date == max(date)) %>%
mutate(ratio = (deaths / cases)) %>%
filter(ratio == max(ratio)) %>%
pull(state)
# Which state has had the lowest number of cases *as of the most recent date*?
# (hint, this is a little trickier to calculate than the maximum because
# of the meaning of the row). `state_lowest_cases`
state_lowest_cases <- states %>%
filter(date == max(date)) %>%
filter(cases == min(cases)) %>%
pull(state)
# Which county has had the highest number of cases?
# `county_highest_cases`
county_highest_cases <- counties %>%
filter(cases == max(cases)) %>%
pull(county)
# What is the highest number of cases that have happened in a single county?
# `num_highest_cases_county`
num_highest_cases_county <- counties %>%
select(county,cases) %>%
filter(cases == max(cases)) %>%
pull(cases)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
unite(counties, location, county, state, sep = ", ", remove = TRUE)
# What is the highest number of cases that have happened in a single county?
# `num_highest_cases_county`
num_highest_cases_county <- counties %>%
select(county,cases) %>%
filter(cases == max(cases)) %>%
pull(cases)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
unite(counties, location, county, state, sep = ", ", remove = TRUE)
# Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together
# (in the form "COUNTY, STATE").
# Add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
# You can do this by mutating a new column, or using the `unite()` function
# (just make sure to keep the original columns as well)
unite(counties, location, county, state, sep = ", ", remove = FALSE)
View(location)
# What is the name of the location (county, state) with the highest number
# of deaths? `location_most_deaths`
location_most_deaths <- counties %>%
filter(deaths == max(deaths)) %>%
pull(location)
library(lintr)
setwd("~/Desktop/project-info201/scripts")
lint("summaryInformationTable.R"
lint("summaryInformationTable.R")
lint("summaryInformationTable.R")
